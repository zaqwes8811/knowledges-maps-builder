# coding: utf-8
# Autogenerated by script D:\github\to-text\mkts\mkt_parser.py
from to_text import IExtracitorResourcePlan
from to_text import IExtractorTextFromResource
from to_text import ITextToText
from to_text import IErrorContainer

# type-mkt: interfaces

class ExtracitorResourcePlan(IExtracitorResourcePlan):
    """ Как бы навигационная часть """
    # Спорный вызов. Как он будет использоваться при множественном наследовании?
    # Захватывает точку входа в ресурс (например, файл базы данных)
    # @return_type IErrorContainer
    def captureRoot(self, urlRoot):
        pass

    # Error _freeRoot();  # должен вызывать в деструкторе

    # @param url информация о том, как можно добраться до вершины ресурса
    # @return карта, по которой можно передвигаться
    # @return_type IGraphToText
    def getPlan(self, url, err):
        pass


    # @return_type IGraphToText
    def getPlanFromText(self, url, err):
        pass


    # @return просто список "адресов"
    # Обобщить дробилку с рекурсией! Она использовалась для разбора страницы Курсеры
    # @return_type List<String>
    def getListAddresses(self, url, err):
        pass


    # Выделяем адреса без подключения, у нас есть текст, который доставерно
    #   отражает план ресурса
    # @return_type List<String>
    def extractListAddressesFromText(self, text, err):
        pass



class ExtractorTextFromResource(IExtractorTextFromResource):
    """ Соединяется с ресурсом и преобразовывает его в текст.
      Thinks:
        Не забывать освободить ресурсы(о реализации), но как быть при множ. наследовании
    """
    # Выделяет весь текст из ресурса по некоторому адресу
    # @param url в переменной все данные, чтобы ресурс мог быть открыт
    # @return_type String
    def extract(self, url, err):
        pass


    # Получить из ресурса сразу список единиц контента - предложений, например
    # @return_type List<String>
    def contentItemsToList(self, url, err):
        pass


class TextToText(ITextToText):
    # @param text зашумленнй текст, например html код
    # @return чистый текст
    # ! не возможно разрешить перегрузку
    # @return_type String
    def testToText(self, text, err):
        pass


    # Получить сразу список единиц контента
    # @return_type List<String>
    def contentItemsToList(self, text, err):
        pass



class ErrorContainer(IErrorContainer):
    """
      Thinks:
        Как я понял в Java нельзя передать примитив по ссылке, исключениями для обработки ошибок
          пользоваться не хочу - исключения для исключительных ситуаций.

        Можно как-то вернуть tuple, но похоже с python это не склеить
    """
    # @return_type String
    def what(self):
        pass

    # @return_type int
    def getErrCode(self):
        pass

