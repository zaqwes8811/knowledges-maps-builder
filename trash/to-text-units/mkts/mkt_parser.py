# coding: utf-8
""" 
    Разборщик макетов для проектов Java! 
    Поэтому вместо наследования от object насл. интерфейс из Java
"""
# Std
import sys

# Other
import dals.os_io.io_wrapper as iow


# App
import _to_langs.mkt_to_python as to_python
import _to_langs.mkt_to_java as to_java
from _to_langs._app_reuse import _kContentMarker

def _remove_end_spaces(line):
    result = ''
    line
    i = len(line)-1
    if i == -1:
        return line
    
    while True: 
        if i == 0:
            break
        
        if line[i] != ' ':
            result = line[:i+1]
            break

        i -= 1
        
    return result

def _replace_tabs_to_spaces():
    pass


def _remove_long_comments(list_lines):
    """ А нужно ли их удалять? 
    
    Thinks: Для смены типа комментариев можно, в случае многостр., 
        возвратить индексы откр. и закр. и в указ. строках
        потом сделать замену.
    """
    open_comment_idx = [] 
    close_comment_idx = []
    result = []
    enable = True
    i = -1
    for at in list_lines:
        i += 1
        save_enable = enable
        
        if save_enable and '"""' in at:
            enable = False
            open_comment_idx.append(i)
            at = at.replace('"""', '"""OPENED:')
            
        if not save_enable and '"""' in at: 
            enable = True
            # TODO(zaqwes): Добавить маркер в закр. комментарий
            close_comment_idx.append(i)
            at = at.replace('"""', 'CLOSED:"""')
  
        # Весь комментарий на одной строке
        if at.count('"""') == 2:
            # TODO(zaqwes): Добавить маркер в закр. комментарий
            enable = True
            close_comment_idx.append(i)
            open_comment_idx.append(i)
            
        # Добавление
        if enable and '#' not in at and at and '"""' not in at:
            result.append(
                    _kContentMarker+_remove_end_spaces(at)) 
        else:
            result.append(_remove_end_spaces(at))     
  
    return result, open_comment_idx, close_comment_idx

if __name__=='__main__':
    sets = iow.get_utf8_template()
    sets['name'] = 'bale_mkt.py'
    
    mkt_in_list = iow.file2list(sets)
    mkt_in_list, open_comment_idx, close_comment_idx = _remove_long_comments(mkt_in_list)
    
    # Дополнительная маркеровка
    # Классы, интерфейсы, методы, переменные
    markered_code = []
    for at in mkt_in_list:
        if _kContentMarker in at:
            if 'interface' in at:
                markered_code.append('I:'+at)
            elif '(' in at:
                markered_code.append('M:'+at)
                
            else:
                raise "No implement"  
        else:
            markered_code.append(at)
    
    # Обрабатываем макет
    python_code, ifaces = to_python.to_code(markered_code)
    print ifaces
    
    # Сохраняем код
    sets['howOpen'] = 'w'
    sets['name'] = '../src/to_text_jy_template.py' 
    python_code.insert(0, '# coding: utf-8')
    python_code.insert(1, '# Autogenerated by script '+str(sys.argv[0]))
    
    # Импорт
    position = 2
    for iface in ifaces:
        python_code.insert(position, 'from to_text import '+iface)
        position += 1
        
    python_code.insert(position, '')
    
    # Пишем
    iow.list2file(sets, python_code)
    
    # Java code
    java_code = to_java.to_code(markered_code, open_comment_idx, close_comment_idx)
    
    for entity in java_code:
        print entity
        sets['howOpen'] = 'w'
        sets['name'] = '../src/to_text/'+entity+'.java' 
        java_code[entity].insert(0, '// coding: utf-8')
        java_code[entity].insert(1, '// Autogenerated by script '+str(sys.argv[0]))
        java_code[entity].insert(2, 'package to_text;')
        java_code[entity].insert(3, '')
        java_code[entity].insert(4, '// Import')
        java_code[entity].insert(5, 'import java.util.List;')
        java_code[entity].insert(6, '')
        java_code[entity].insert(7, '// App')
        position = 8
        for iface in ifaces:
            java_code[entity].insert(position, 'import to_text.'+iface+';')
            position += 1
        java_code[entity].insert(position, '')
            
        iow.list2file(sets, java_code[entity])
         

            
            
            
            
            
            
            
            
            
            
            
            
            
            
